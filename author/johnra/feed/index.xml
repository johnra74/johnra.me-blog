<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>John Ra &#8211; J O H N R A . M E</title>
	<atom:link href="/author/johnra/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>...yet another musings of a techie</description>
	<lastBuildDate>Mon, 04 Apr 2022 00:43:52 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.2</generator>
	<item>
		<title>It&#8217;s a trap!</title>
		<link>/2022/03/29/its-a-trap/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Tue, 29 Mar 2022 15:29:54 +0000</pubDate>
				<category><![CDATA[Rants]]></category>
		<guid isPermaLink="false">/?p=560</guid>

					<description><![CDATA[Confirmation bias &#8211; the tendency to discredit non-confirmative evidence, or to seek out (actively or subconsciously) primarily confirming evidence &#8211; is part of all of us. We all suffer from it, every day. As technologist, we could do better. We should always re-evaluate all the facts and not fall into the traps of our dogma/orthodoxy &#8211; what we see or want to see. Rather than reviewing all the facts, we too often hold onto our beliefs. Ask a front-end developer which library/framework should be used for a given project, it&#8217;s rarely followed by a question on what the requirements are.&#8230;]]></description>
										<content:encoded><![CDATA[<p>Confirmation bias &#8211; the tendency to discredit non-confirmative evidence, or to seek out (actively or subconsciously) primarily confirming evidence &#8211; is part of all of us. We all suffer from it, every day. As technologist, we could do better. We should always re-evaluate all the facts and not fall into the traps of our dogma/orthodoxy &#8211; what we see or want to see.</p>


<div class="wp-block-image"><figure class="aligncenter size-full"><img width="525" height="354" src="/wp-content/uploads/2022/03/bias.png" alt="" class="wp-image-565"/></figure></div>



<p>Rather than reviewing all the facts, we too often hold onto our beliefs. Ask a front-end developer which library/framework should be used for a given project, it&#8217;s rarely followed by a question on what the requirements are. Rather, if they are a ReactJS developer, they will automatically respond with ReactJS. An Angular developer is no different. We end up choosing a solution first then justify its fit. Just ask why ReactJS is better solution, they will point to facts like, &#8220;it&#8217;s the most downloaded library&#8221;</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img loading="lazy" width="809" height="429" src="/wp-content/uploads/2022/03/reactstat.png" alt="" class="wp-image-566"/></figure></div>



<p>By that logic, I should just go buy <a href="https://www.edmunds.com/most-popular-cars/">a Ford F-Series truck</a>. If I&#8217;m an eco-friendly individual that never needs the truck to carry loads, maybe I don&#8217;t need a truck. Maybe an electric vehicle is a better fit. Yet, because it is the most sold vehicle in America, do you think it&#8217;s the right fit. Failure to take into considerations of the facts of the requirements and/or the make-up of the engineering team, we do a disservice to our clients/customers. </p>



<h2>How to Avoid Confirmation Bias?</h2>



<p>Discuss your thoughts with others. Don&#8217;t jump to conclusions. Gather as much facts. Surround yourself with a diverse group of people, and don&#8217;t be afraid to listen. The simplest way to avoid confirmation bias is to look at your own beliefs. Search out ways in which your default solution may be wrong, rather than the ways in which it is right. Always be learning. Seek out competitive solutions and learn from it.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>7-Minute Abs</title>
		<link>/2022/02/02/7-minute-abs/</link>
					<comments>/2022/02/02/7-minute-abs/#respond</comments>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Wed, 02 Feb 2022 15:20:32 +0000</pubDate>
				<category><![CDATA[Humor]]></category>
		<guid isPermaLink="false">/?p=546</guid>

					<description><![CDATA[Unless you&#8217;ve abstained from social networks, you&#8217;re probably heard of Wordle or have seen blocks of green, black, and yellow on your social feed. I have to admit, I&#8217;ve been caught up on the riptide &#8211; even google has acknowledged the popularity of it I tend to stay away from mainstream fad &#8211; especially those on social media platforms. I did, however, read the article on New York Times &#8211; who later purchased it for 7-figures. Eventually, I gave in and played to see what the craze was about. To my surprise, I was instantly hooked. I was surprised by&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Unless you&#8217;ve abstained from social networks, you&#8217;re probably heard of <a href="https://www.powerlanguage.co.uk/wordle/">Wordle</a> or have seen blocks of green, black, and yellow on your social feed. I have to admit, I&#8217;ve been caught up on the riptide &#8211; even google has acknowledged the popularity of it </p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img loading="lazy" width="345" height="151" src="/wp-content/uploads/2022/02/google-wordle.png" alt="" class="wp-image-539"/></figure></div>



<p>I tend to stay away from mainstream fad &#8211; especially those on social media platforms. I did, however, read the <a href="https://www.nytimes.com/2022/01/03/technology/wordle-word-game-creator.html">article on New York Times</a> &#8211; who later <a href="https://www.inc.com/bill-murphy-jr/the-creator-of-wordle-just-sold-it-for-seven-figures-taught-5-smart-lessons-in-process.html">purchased it for 7-figures</a>. Eventually, I gave in and played to see what the craze was about. To my surprise, I was instantly hooked. I was surprised by the simplicity of it. I&#8217;ve written 2 mobile games that I published on both Apple App Store and Android Play Store &#8211; both failed to retain players. My games were too monotonous and lacked meaningful engagement to maintain revisit. I never considered the &#8220;less is more&#8221; approach. The simple idea of releasing one puzzle a day is genius.</p>



<p>This brings me to the title, &#8220;7-Minute Abs.&#8221; An old colleague mentioned it when I shared <a href="https://www.wordhex.app/">WordHex</a>, an app I created over the weekend.  &#8220;7-Minute Abs&#8221; is a <a href="https://youtu.be/rnso4nfdM9w">scene from &#8220;Something About Mary&#8221;</a> where the hitchhiker shares his business idea based on &#8220;8-Minute Abs&#8221; but in 7 minutes! It&#8217;s a little spot on.</p>



<p>I created WordHex based on Wordle except it&#8217;s 6-letter words. One puzzle a day was just not enough for me. I wanted to play another round. I also hadn&#8217;t coded in a while. Last time I did, it was in golang &#8211; I may share the back story on that in the future. WordHex is available in beta. Once it&#8217;s stable, a friend suggested I create one for 4-letter, 7-letter, and 8-letter words as well. </p>



<p>If you do find Wordle entertaining and, like me, can&#8217;t wait another day; please visit <a href="https://www.wordhex.app/">WordHex</a>. </p>
]]></content:encoded>
					
					<wfw:commentRss>/2022/02/02/7-minute-abs/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>I&#8217;m Back?</title>
		<link>/2022/01/23/restart/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sun, 23 Jan 2022 22:59:21 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=527</guid>

					<description><![CDATA[It&#8217;s been a while since I posted an entry &#8211; just go ahead and look at the date on my prior post. I don&#8217;t even know if blogging is a thing anymore in the world of TikTok. Granted, given how vastness and complex technology space is, I don&#8217;t think anyone can do justice on a short video. Look, it&#8217;s not like this is my New Year&#8217;s resolution or anything like that. Let&#8217;s see if I can try to post at least once a month. And yes, I get credit for this post towards January.]]></description>
										<content:encoded><![CDATA[
<p>It&#8217;s been a while since I posted an entry &#8211; just go ahead and look at the date on my prior post.  I don&#8217;t even know if blogging is a thing anymore in the world of TikTok. Granted, given how vastness and complex technology space is, I don&#8217;t think anyone can do justice on a short video. </p>



<p>Look, it&#8217;s not like this is my New Year&#8217;s resolution or anything like that. Let&#8217;s see if I can try to post at least once a month. And yes, I get credit for this post towards January.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Design Pattern: Chain of Responsibility</title>
		<link>/2014/05/06/design-pattern-chain-of-responsibility/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Tue, 06 May 2014 21:33:01 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Patterns]]></category>
		<category><![CDATA[Tutorial]]></category>
		<category><![CDATA[Development]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=387</guid>

					<description><![CDATA[In my original Tetris code base, I started out with a simple RotationController class. As I recall, this was a trivial class with a single shape. However, as more shapes were added, it quickly became unwieldy.&#160;Looking back at this code, I want to cringe at my lack of discipline in following proper design principles. On the bright side, I have something to blog about. Chain of Responsibility The chain of responsibility design pattern&#160;is known as a behavioral pattern consisting of client objects and a series of handler&#160;objects. It provides more than one object the opportunity to handle a request by&#8230;]]></description>
										<content:encoded><![CDATA[<p>In my original <a href="https://github.com/johnra74/tetris">Tetris code base</a>, I started out with a simple <a href="https://github.com/johnra74/tetris/blob/82b3f058fbf62c036623a3b3eb16ca3bf2550f2d/tetris/tetris-core/src/main/java/com/jstrgames/tetris/core/controller/RotateController.java">RotationController class</a>. As I recall, this was a trivial class with a single shape. However, as more shapes were added, it quickly became unwieldy.&nbsp;Looking back at this code, I want to cringe at my lack of discipline in following proper design principles. On the bright side, I have something to blog about.</p>
<p><strong>Chain of Responsibility</strong></p>
<p><a href="/wp-content/uploads/2014/05/chain_of_resp_pattern.png"><img loading="lazy" class="alignleft size-medium wp-image-399" src="/wp-content/uploads/2014/05/chain_of_resp_pattern-300x124.png" alt="chain_of_resp_pattern" width="300" height="124"></a>The chain of responsibility design pattern&nbsp;is known as a behavioral pattern consisting of client objects and a series of handler&nbsp;objects. It provides more than one object the opportunity to handle a request by linking receivers together (see left UML diagram). Instead of having one monolithic class, as I have or coupling your code to&nbsp;each and every concrete class,&nbsp;with the chain of responsibility pattern, you can avoid both.</p>
<p><strong>Refactoring&nbsp;Rotation Controller</strong></p>
<p><a href="/wp-content/uploads/2014/05/action_controller_before.png"><img loading="lazy" class="alignright size-medium wp-image-394" src="/wp-content/uploads/2014/05/action_controller_before-300x240.png" alt="action_controller_before" width="300" height="240"></a>On the right is the&nbsp;UML diagram for handling&nbsp;user inputs in my game. The ControlListener implements the Java AWT Event KeyListener. The ControlListener listens for various keyboard actions (UP_ARROW &#8211;&nbsp;rotate clockwise, DOWN_ARROW &#8211; drop, LEFT_ARROW &#8211; move left, RIGHT_ARROW &#8211; move right, Q &#8211; rotate counter-clockwise, and W &#8211; rotate clockwise). When user presses UP_ARROW, Q, or W, it will create an instance of RotateController class to handle the respective rotation&nbsp;action. On the original UML diagram, you can see the long list of private methods I&#8217;ve implemented to handle the rotation action for various tetris shapes.</p>
<p><a href="/wp-content/uploads/2014/05/action_controller_after.png"><img loading="lazy" class="alignleft size-medium wp-image-404" src="/wp-content/uploads/2014/05/action_controller_after-300x242.png" alt="action_controller_after" width="300" height="242"></a>On the left is the refactored UML diagram with the&nbsp;rotation logic implemented using the chain of responsibility design pattern. Gone are the many private methods created&nbsp;to handle every possible shapes. For each shape, we&nbsp;now have a respective&nbsp;handler class responsible for rotating the shape. The chain of these rotation handler will check if can handle the rotation request by inspecting the shape associated with the request.</p>


<pre class="wp-block-code"><code>public Coordinate&#91;] executeRequest(RotateRequest request) {
  final Coordinate&#91;] coordinate;
  final IShape shape = request.getShape();
  final Rotate rotate = request.getRotate();

  if( shape.getShape() == this.getShape()) {
    coordinate = getTargetCoordinates(shape, rotate);
  } else {
    if(this.nextHandler == null) {
      throw new HandlerNotFoundException("No handler defined for " + shape.getShape());
    } else {
      coordinate = this.nextHandler.executeRequest(request);
    }
  }

  return coordinate;
}</code></pre>



<p>If it cannot handle the request, it will pass the request to the next handler. If it reaches the end of the chain and no handler is found, a runtime exception will be thrown. Feel free to browse the final code base on <a href="https://github.com/johnra74/tetris/tree/master/tetris/tetris-core/src/main/java/com/jstrgames/tetris/core/controller">GitHub</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Java-based Tetris Game</title>
		<link>/2014/04/06/java-based-tetris-game/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sun, 06 Apr 2014 20:44:43 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Open Source]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=383</guid>

					<description><![CDATA[I&#8217;ve been planning to write some tutorials on design patterns. I just need to find some time and my day job at the corporate world has kept me busy. I plan to use this code base from a java tetris application I wrote a while back. I&#8217;ve done some clean ups &#8211; who&#8217;s not embarrassed by their old code. Don&#8217;t worry, I haven&#8217;t completely cleaned it up. After all, the plan is to write tutorials on design patterns that would help improve this code. My first topic, when I do get some time, will be Chain of Responsibility.]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been planning to write some tutorials on design patterns. I just need to find some time and my day job at the corporate world has kept me busy. I plan to use <a href="https://github.com/johnra74/tetris">this code base</a> from a java tetris application I wrote a while back. I&#8217;ve done some clean ups &#8211; who&#8217;s not embarrassed by their old code. Don&#8217;t worry, I haven&#8217;t completely cleaned it up. After all, the plan is to write tutorials on design patterns that would help improve this code. My first topic, when I do get some time, will be <a href="/2014/05/06/design-pattern-chain-of-responsibility/">Chain of Responsibility</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Gradle Plug-in: WSDL to Java Code Generation</title>
		<link>/2014/03/08/gradle-plug-in-wsdl-to-java-code-generation/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sat, 08 Mar 2014 14:39:38 +0000</pubDate>
				<category><![CDATA[Gradle]]></category>
		<category><![CDATA[Groovy]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Tutorial]]></category>
		<category><![CDATA[Development]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=373</guid>

					<description><![CDATA[It didn&#8217;t take long for me to fall in love with Gradle. Once I was introduced to it, I never looked back. It was the same with Ant as I transitioned from Make. But, Gradle is different. I always felt building was necessary evil. It was often done way after first code was ever written. This isn&#8217;t true with Gradle. Before any code is written, I start every project by setting up my Gradle build. I actually look forward to adding more features to my build. How crazy is that?! WSDL to JavaRecently, I published one of my old SharePoint&#8230;]]></description>
										<content:encoded><![CDATA[<p>It didn&#8217;t take long for me to fall in love with <a href="http://www.gradle.org/">Gradle</a>. Once I was introduced to it, I never looked back. It was the same with <a href="http://ant.apache.org/">Ant</a> as I transitioned from <a href="https://www.gnu.org/software/make/">Make</a>. But, Gradle is different. I always felt building was necessary evil. It was often done way after first code was ever written. This isn&#8217;t true with Gradle. Before any code is written, I start every project by setting up my Gradle build. I actually look forward to adding more features to my build. How crazy is that?!</p>
<p><strong>WSDL to Java</strong><br />Recently, I published one of my old <a href="https://github.com/johnra74/sharepoint-api">SharePoint API</a> to GitHub. Originally, I had written the build script using Ant for this project. One of the task I had was to take the SharePoint List WSDL and generate the corresponding java soap client classes. This is fairly trivial task in Ant &#8211; in fact, axis already provides <a href="http://axis.apache.org/axis/java/ant/ant.html">an ant task</a>. Sure, I could google for Gradle plug-in for WSDL to Java but I wanted to use this opportunity to learn to write my own plug-in. I&#8217;ve also been looking to <a href="/2013/07/25/thats-groovy/">write more Groovy code</a>.</p>
<p><strong>Creating a Custom Gradle Task</strong><br /><a href="/wp-content/uploads/2014/03/gradle1.png"><img loading="lazy" class="alignright size-thumbnail wp-image-375" src="/wp-content/uploads/2014/03/gradle1-150x150.png" alt="gradle buildSrc" width="150" height="150" /></a>All custom Gradle tasks resides under buildSrc at the root of your project. If you are familiar with Gradle multiproject then you will notice that buildSrc is structured like a subproject. In fact, it is a subproject. Since I will be writing my custom task using Groovy, my source file will reside under src/main/groovy. If you wanted to write your custom task in Java, you would create it under src/main/java.</p>
<p>Since my custom task is merely a wrapper for Axis2 class org.apache.axis2.wsdl.WSDL2Java, the build.gradle file will contain the Axis2 dependencies. Note, if your custom task does not require any dependencies besides core java, then you do not need to define the build.gradle file. Here&#8217;s my build.gradle file:</p>


<pre class="wp-block-code"><code>repositories {
  mavenCentral()
}

dependencies {
  compile 'org.apache.axis2:axis2:1.6.2'
  compile 'org.apache.axis2:axis2-xmlbeans:1.6.2'
  compile 'org.apache.xmlbeans:xmlbeans:2.6.0'
}</code></pre>



<p>Once the build.gradle has been defined, I create my custom task in Groovy &#8211; WSDL2Java.groovy. The below Groovy class is a simple implementation. As you can see, there are no validation checks. It assumes all properties will be set.</p>



<pre class="wp-block-code"><code>import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
// since this groovy class has the same name as the axis2 class, alias axis2 class to CodeGen
import org.apache.axis2.wsdl.WSDL2Java as CodeGen

class WSDL2Java extends DefaultTask {
  // source location of the WSDL file
  String wsdlfilename
  // specify the binding type - xmlbeans, adb, or jibx
  String databindingName
  // target location where java classes should be created under
  String targetSourceFolderLocation
  // base package name
  String packageName

  @TaskAction
  def generateJava() {
    String&#91;] args =
      &#91;
        "-o", targetSourceFolderLocation,
        "-p", packageName,
        "-d", databindingName,
        "-or",
        "-uri", wsdlfilename
      ]
    CodeGen.main(args)
  }
}</code></pre>



<p>Here&#8217;s how this custom task is called within the project. First, I define a task called &#8220;genJavaFromWSDL&#8221; with type WSDL2Java &#8211; the Groovy class name. Within this custom task, I set all properties. Then, I update the dependency of java compile task to this custom task. This will ensure the java soap client is created before build is trigger.</p>



<pre class="wp-block-code"><code>// define the WSDL2Java task
task genJavaFromWSDL(type: WSDL2Java) {
  wsdlfilename= "$buildDir/../src/main/wsdl/Lists.SP2013.wsdl"
  databindingName='xmlbeans'
  targetSourceFolderLocation= "$buildDir/generated/wsdl/main"
  packageName='com.microsoft.sharepoint'
}

// add prior hook before compile
compileJava.dependsOn genJavaFromWSDL

// add generated wsdl java classes to source dir
sourceSets.main.java.srcDir "$buildDir/generated/wsdl/main/src"
sourceSets.main.java.srcDir "$buildDir/generated/wsdl/main/resources"</code></pre>



<div class="wp-block-image"><figure class="alignleft"><a href="/wp-content/uploads/2014/03/gradle2.png"><img src="/wp-content/uploads/2014/03/gradle2.png" alt="Gradle Project" class="wp-image-378"/></a></figure></div>



<p>Finally, I add the generated source and resources to the Groovy sourceSet so that the generated sources are properly compiled. It also allows them to appear under Eclipse.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Fluent Interface by Example</title>
		<link>/2014/03/01/fluent-interface-by-example/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sat, 01 Mar 2014 22:30:17 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Open Source]]></category>
		<category><![CDATA[Patterns]]></category>
		<category><![CDATA[Tutorial]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[SharePoint]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=364</guid>

					<description><![CDATA[Chances are you have seen Fluent Interface in action. I&#8217;ve seen it without realizing what they were until I stumbled across Martin Fowler&#8217;s blog. The aim is simple &#8211; to provide for a more readable code. SharePoint APISeveral years ago, I wrote a SharePoint API in Java to interact with its List Soap Service. This soap service had a feature to query the target list using Collaborative Application Markup Language (CAML). Here&#8217;s an example of CAML query to filter the task list where the TaskName is &#8220;Foo Bar&#8221; and the Status is &#8220;In Progress&#8221;. As part of this SharePoint API,&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Chances are you have seen Fluent Interface in action. I&#8217;ve seen it without realizing what they were until I stumbled across <a href="http://martinfowler.com/bliki/FluentInterface.html">Martin Fowler&#8217;s blog</a>. The aim is simple &#8211; to provide for a more readable code.</p>



<p><strong>SharePoint API</strong><br>Several years ago, I wrote a SharePoint API in Java to interact with its List Soap Service. This soap service had a feature to query the target list using <a href="http://msdn.microsoft.com/en-us/library/office/ms467521(v=office.15).aspx">Collaborative Application Markup Language (CAML)</a>. Here&#8217;s an example of CAML query to filter the task list where the TaskName is &#8220;Foo Bar&#8221; and the Status is &#8220;In Progress&#8221;.</p>



<pre class="wp-block-code"><code>&lt;query&gt;
  &lt;where&gt;
    &lt;and&gt;
      &lt;eq&gt;
        &lt;fieldref name="TaskName"&gt;
        &lt;value type="Text"&gt;Foo Bar&lt;/value&gt;
      &lt;/fieldref&gt;&lt;/eq&gt;
      &lt;eq&gt;
        &lt;fieldref name="Status"&gt;
        &lt;value type="Text"&gt;In Progress&lt;/value&gt;
      &lt;/fieldref&gt;&lt;/eq&gt;
    &lt;/and&gt;
   &lt;/where&gt;
&lt;/query&gt;</code></pre>



<p>As part of this SharePoint API, I had written a corresponding set of Java classes &#8211; each node represented by a class. For trivial query like above, it would look like the following:</p>



<pre class="wp-block-code"><code>final Expression leftExpression = new Equals(new Field("TaskName", "Foo Bar"));
final Expression rightExpression = new Equals(new Field("Status", "In Progress"));
final Condition condition = new And(leftExpression, rightExpression);
final Where clause = new Where(condition);
final Query query = new Query(clause);</code></pre>



<p>As you can predict, for complicated scenarios, this would quickly become unreadable. By applying the concept of Fluent Interface, we can make it far more readable. For example, the above become the following:</p>



<pre class="wp-block-code"><code>final Where clause =
  new Where(
    and(eq("TaskName", "Foo Bar"),
        eq("Status", "In Progress")));</code></pre>



<p><strong>Applying Fluent Interface</strong><br>A good Fluent Interface takes a while to build. It should be built with the goal of readability and flow in mind. Return type should be chosen based on what you need to continue fluent action. Here&#8217;s the SharePoint API implementation. For the complete implementation, please see <a href="https://github.com/johnra74/sharepoint-api/blob/master/sharepoint/sharepoint-lib/src/main/java/com/jstrgames/sharepoint/query/Where.java">GitHub Source</a>.</p>



<pre class="wp-block-code"><code>.
.
.
public static Condition and(Expression left, Expression right) {
  return new And(left, right);
}

public static Condition and(Expression left, Condition right) {
  return new And(left, right);
}

public static Condition and(Condition left, Expression right) {
  return new And(left, right);
}

public static Condition and(Condition left, Condition right) {
  return new And(left, right);
}
.
.
.
public static Expression eq(Field field) {
  return new Equals(field);
}</code></pre>



<p>For complicated scenarios where you want to get all task assigned to John with status in &#8220;New&#8221; or &#8220;In Progress&#8221; and task created after Jan 1, 2014, the CAML would like the following.</p>



<pre class="wp-block-code"><code>&lt;query&gt;
  &lt;where&gt;
    &lt;and&gt;
      &lt;eq&gt;
        &lt;fieldref name="AssignedTo"&gt;
        &lt;value type="Text"&gt;John&lt;/value&gt;
      &lt;/fieldref&gt;&lt;/eq&gt;
      &lt;and&gt;
        &lt;or&gt;
          &lt;eq&gt;
            &lt;fieldref name="Status"&gt;
            &lt;value type="Text"&gt;New&lt;/value&gt;
          &lt;/fieldref&gt;&lt;/eq&gt;
          &lt;eq&gt;
            &lt;fieldref name="Status"&gt;
            &lt;value type="Text"&gt;In Progress&lt;/value&gt;
          &lt;/fieldref&gt;&lt;/eq&gt;
        &lt;/or&gt;
        &lt;gt&gt;
          &lt;fieldref name="CreateDate"&gt;
          &lt;value type="DateTime"&gt;2014-01-01T00:00:00Z&lt;/value&gt;
        &lt;/fieldref&gt;&lt;/gt&gt;
    &lt;/and&gt;
   &lt;/and&gt;&lt;/where&gt;
&lt;/query&gt;</code></pre>



<p>Here&#8217;s the same in Fluent Interface</p>



<pre class="wp-block-code"><code>final Where clause =
  new Where(
    and(eq("AssignedTo", "John"),
    and(
      or(eq("Status", "New"),
         eq("Status", "In Progress")),
      gt("CreateDate", "2014-01-01T00:00:00Z"))));</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Application Health Monitor</title>
		<link>/2013/09/06/application-health-monitor/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sat, 07 Sep 2013 00:57:13 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[Open Source]]></category>
		<category><![CDATA[HttpComponent]]></category>
		<category><![CDATA[Infrastructure]]></category>
		<category><![CDATA[Maintenance]]></category>
		<category><![CDATA[Productivity]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=341</guid>

					<description><![CDATA[I&#8217;ve been meaning to contribute to open source for some time. I really didn&#8217;t have anything particularly in mind to what I wanted to publish. However, I&#8217;ve been dealing with varying degree of integration complexityÂ to some of my application environments at the office. Inevitably, someone would scratch their head for several minutes trying to figure out why something failed only to realize that it was due to an external dependency. Needless to say, a simple tool that would provide a holistic view of the system could have saved them some pain. This could then be expanded to other environments: shared&#8230;]]></description>
										<content:encoded><![CDATA[<p>I&#8217;ve been meaning to contribute to open source for some time. I really didn&#8217;t have anything particularly in mind to what I wanted to publish. However, I&#8217;ve been dealing with varying degree of integration complexityÂ to some of my application environments at the office. Inevitably, someone would scratch their head for several minutes trying to figure out why something failed only to realize that it was due to an external dependency. Needless to say, a simple tool that would provide a holistic view of the system could have saved them some pain. This could then be expanded to other environments: shared development, integration, UAT, QA, and Production. A single page that would provide an overview of the health of the specified environment would be very helpful.</p>
<p><strong>Application Monitoring</strong></p>
<p>There are several things to consider when monitoring an application. This is not meant as an exhaustive list but here are few items:</p>
<ul>
<li>application state</li>
<li>resource utilization</li>
<li>proactively report application errors</li>
<li>module/component status</li>
<li>external dependency status (databases, services, etc.)</li>
</ul>
<p>The monitor should be proactive and not reactive. It should provide early enough warning before something goes wrong. This includes monitoring dependencies and the application itself.Â There are tools that monitor logs and report when it detects various errors in the log file. Although this is better than nothing, it&#8217;s too reactive. If you&#8217;re lucky enough to have nagios in-house, this is better. However, in most cases, they are configured only for Production and, if lucky, QA. However, for other environments, it may be an overkill to use nagios.</p>
<p><strong>Health Monitoring</strong></p>
<p>The purpose of my <a href="https://github.com/johnra74/health-monitor">health monitor tool</a> is to provide a simple framework to quickly setup and actively check the overall health of any application.</p>
<p><a href="/wp-content/uploads/2013/09/healthmonitor.png"><img loading="lazy" class="aligncenter size-full wp-image-345" src="/wp-content/uploads/2013/09/healthmonitor.png" alt="healthmonitor" width="749" height="349" /></a></p>
<p>Health monitoring tool is built on the following open source frameworks:</p>
<ul>
<li><a href="http://quartz-scheduler.org/">quartz-scheduler</a> &#8211; used to schedule recurring checks to verify your site, components/modules, and dependencies</li>
<li><a href="http://hc.apache.org/">apache httpcomponents</a> &#8211; used to retrieve resources (JSON/HTML) from HTTP/HTTPS servers</li>
<li><a href="http://grizzly.java.net/">grizzly NIO framework</a> &#8211; used as embedded web container to host status page (see above screenshot)</li>
<li><a href="https://github.com/FasterXML/jackson">jackson</a> &#8211; used to parse JSON resources and configuration</li>
<li><a href="http://freemarker.org/">freemarker</a> &#8211; used for web/email template</li>
<li><a href="http://www.oracle.com/technetwork/java/javamail/index.html">javamail</a> &#8211; used to send failure notification</li>
</ul>
<p>It can proactively check your application and its dependencies with predefined service checks:</p>
<ul>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/svc/impl/HttpService.java">com.jstrgames.monitor.svc.impl.HttpService</a> &#8211; make non-SSL web call</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/svc/impl/HttpsService.java">com.jstrgames.monitor.svc.impl.HttpsService</a> &#8211; make SSL web call</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/svc/impl/SimpleJmxService.java">com.jstrgames.monitor.svc.impl.SimpleJmxService</a> &#8211; make simple remote JMX calls</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/svc/impl/SocketService.java">com.jstrgames.monitor.svc.impl.SocketService</a> &#8211; make a client socket call</li>
</ul>
<p>It can then verify these services with predefined rules:</p>
<ul>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/rule/HttpResponseCode.java">com.jstrgames.monitor.rule.HttpResponseCode</a> &#8211; check if expected status code returned</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/rule/HttpResponseBody.java">com.jstrgames.monitor.rule.HttpResponseBody</a> &#8211; check if body contains expected values</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/rule/JsonResponse.java">com.jstrgames.monitor.rule.JsonResponse</a> &#8211; check if specified JSON key has expected value</li>
<li><a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/main/java/com/jstrgames/monitor/rule/SimpleJmxResult.java">com.jstrgames.monitor.rule.SimpleJmxResult</a> &#8211; check if specified JMX attribute has expected value</li>
</ul>
<p>All can be configured on a simple <a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor/src/test/resources/demo.services.json">JSON format configuration file</a>.</p>
<p><strong>Example: Checking HTTPS site</strong></p>
<p>The use case is to verify that the text &#8220;Google Search&#8221; and &#8220;I&#8217;m Feeling Lucky&#8221; appears on the google.com page every 5 minutes:</p>


<pre class="wp-block-code"><code>&#91;{"servicename": "HTTPS Example (SSL)",
  "classname": "com.jstrgames.monitor.svc.impl.HttpsService",
  "schedule": "0 0/5 * * * ?",
  "hostname": "www.google.com",
  "port": 443,
  "uri": "/",
  "rules": &#91;{
    "classname": "com.jstrgames.monitor.rule.HttpResponseCode",
    "condition": "equals",
    "expected": 200
  },{
    "classname": "com.jstrgames.monitor.rule.HttpResponseBody",
    "condition": "contains",
    "expected": "Google Search"
  },{
    "classname": "com.jstrgames.monitor.rule.HttpResponseBody",
    "condition": "contains",
    "expected": "I'm Feeling Lucky"
  }]
}]</code></pre>



<p>Here, class com.jstrgames.monitor.svc.impl.HttpsService is used check www.google.com at port 443. Once the resource has been retrieved, 3 rules are executed:</p>



<ul><li>verify http response code is 200</li><li>verify http response body contains the phrase &#8220;Google Search&#8221;</li><li>verify http response body contains the phrase &#8220;I&#8217;m Feeling Lucky&#8221;</li></ul>



<p>If any of the above checks fails, service is considered to be in &#8220;FAIL&#8221; status. If it fails to connect to said service, it is in &#8220;ERROR&#8221; status. It will also send out a notification and user will see a similar content in their inbox, granted, not as pretty.</p>



<div class="wp-block-image"><figure class="aligncenter"><a href="/wp-content/uploads/2013/09/healthmonitor.email_.png"><img src="/wp-content/uploads/2013/09/healthmonitor.email_.png" alt="healthmonitor.email" class="wp-image-353"/></a></figure></div>



<p>For more details, please go to my <a href="https://github.com/johnra74/health-monitor/blob/master/health-monitor">github repository</a>. I will be updating its wiki page soon.</p>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>That&#8217;s Groovy!</title>
		<link>/2013/07/25/thats-groovy/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Thu, 25 Jul 2013 21:51:45 +0000</pubDate>
				<category><![CDATA[Groovy]]></category>
		<category><![CDATA[Java]]></category>
		<category><![CDATA[Tutorial]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[Scripting]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=323</guid>

					<description><![CDATA[Ask me a month ago regarding my choice of scripting language, my answer would have been Perl or, if it&#8217;s a trivial use case, Bash. That&#8217;s no longer the case. Now, I am eager to flex my Groovy knowledge. Why Groovy? Consider the use case of executing a system command and redirecting the output to be processed by your program. With Perl, this is a trivial task: just use a backquote to perform your system command. Perl will assign the result of your standard out to the left-hand variable. In Groovy, it&#8217;s just as easy. Now, imagine having to perform&#8230;]]></description>
										<content:encoded><![CDATA[<p>Ask me a month ago regarding my choice of scripting language, my answer would have been Perl or, if it&#8217;s a trivial use case, Bash. That&#8217;s no longer the case. Now, I am eager to flex my Groovy knowledge.</p>
<p><strong>Why Groovy?</strong></p>
<p>Consider the use case of executing a system command and redirecting the output to be processed by your program. With Perl, this is a trivial task: just use a backquote to perform your system command. Perl will assign the result of your standard out to the left-hand variable.</p>


<pre class="wp-block-code"><code>$output = `ls -l`;
print $output, "\n";</code></pre>



<p>In Groovy, it&#8217;s just as easy.</p>



<pre class="wp-block-code"><code>def process = "ls -l".execute()
println "${process.text}"</code></pre>



<p>Now, imagine having to perform this in Java:</p>



<pre class="wp-block-code"><code>try {
  StringBuffer stdout = new StringBuffer();
  Process p = Runtime.getRuntime().exec( "ls -l" );

  BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()) );
  while ((line = in.readLine()) != null) {
    stdout.append(line);
  }
  in.close();
}
catch (Exception e) {
  // ...
}</code></pre>



<p>Did I get your attention? I hope so. Let&#8217;s consider list. I think Groovy is better at list than Perl. Take the use case of sorting a list of numbers. In Perl, it would look akin to this.</p>



<pre class="wp-block-code"><code>@list = (1, 23, 4, 6, 12, 5, 36);
@sortedlist = sort {$a &lt;=> $b} @list;
print "@sortedlist ";</code></pre>



<p>In Groovy, it&#8217;s even shorter</p>



<pre class="wp-block-code"><code>def list = &#91;1, 23, 4, 6, 12, 5, 26]
println list.sort()</code></pre>



<p>Lists are easier to work with in Groovy. If you want to print a sub-range, it&#8217;s &#8220;println list[1..3]&#8221;. If you want the last 3 items in the array in reverse order, it&#8217;s &#8220;println list[-3..-1]&#8221;. Negative index tell Groovy to retrieve the item from tail and work its way back.</p>



<p>If you&#8217;re a Java developer, how can you not love Groovy.</p>



<p><strong>Like Java, Love Groovy</strong></p>



<p>Groovy is built on Java. It brings dynamic typing and the benefits of dynamic language to the world of Java but still provides static typing when needed. Because it&#8217;s built on Java, Groovy has access to all the Java API available in your classpath. By default, the following classes are exposed to Groovy:</p>



<ul><li>java.io.*</li><li>java.lang.*</li><li>java.math.BigDecimal</li><li>java.math.BigInteger</li><li>java.net.*</li><li>java.util.*</li></ul>



<p>If you need a class not imported by default, if it&#8217;s in the classpath, Groovy can use them. You can import them in or use the fully qualifying classname:</p>



<pre class="wp-block-code"><code>println java.sql.Date.valueOf("2013-12-31").getTime()</code></pre>



<p>As stated earlier, all of Java libraries are at your disposal. Short of sounding like an infomercial, that&#8217;s not all! You can compile Groovy program and it will become accessible from Java. Consider having to write a simple POJO. Sure, you can use most IDEs to generate your getters and setters, but with Groovy, this can be simplified.</p>



<pre class="wp-block-code"><code>package com.jstrgames.groovy.example

class Book {
  String title
  String author

  String toString() { "${title} ${author}" }
}</code></pre>



<p>Once compiled by Groovy compiler, com.jstrgames.groovy.example.Book can be accessed from any Java program. It will also automatically create all your getters and setters for each property: getTitle(), setTitle(), getAuthor(), and setAuthor(). If you want to use this class in Groovy, you can directly access the properties:</p>



<pre class="wp-block-code"><code>def book = new Book( title: "Groovy by Action", author: "Dierk Koenig" )
println book

def myBook = new Book()
myBook.title = "Tech Genre"
myBook.author = "John Ra"
print myBook</code></pre>



<p>You can clearly see an increased productivity building modules/application/APIs with Groovy. If you want to learn more, I highly recommend reading <em>Groovy by Action</em> by Dierk Koenig.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>iOS App Development Tutorial Part VII: In-App Web Browsing</title>
		<link>/2013/05/25/ios-appdev-part7/</link>
		
		<dc:creator><![CDATA[John Ra]]></dc:creator>
		<pubDate>Sat, 25 May 2013 23:46:20 +0000</pubDate>
				<category><![CDATA[iOS]]></category>
		<category><![CDATA[Tutorial]]></category>
		<category><![CDATA[Development]]></category>
		<category><![CDATA[Mobile]]></category>
		<guid isPermaLink="false">http://blog.jstrgames.com/?p=302</guid>

					<description><![CDATA[Having a list of article isn&#8217;t enough, we need to allow users to click through to the actual article. It&#8217;s also not a good user experience to have each article open in safari. We want to provide the ability to view the article within our app. Apple UIKit makes this extremely easy by providing a Web View component to view the target website. 1. Add New View Controller We want to first add a new View Controller that will hold the Web View. This can be done by dragging View Controller from object browser over to the storyboard. Once added,&#8230;]]></description>
										<content:encoded><![CDATA[<p>Having a list of article isn&#8217;t enough, we need to allow users to click through to the actual article. It&#8217;s also not a good user experience to have each article open in safari. We want to provide the ability to view the article within our app. Apple UIKit makes this extremely easy by providing a Web View component to view the target website.</p>
<p><strong>1. Add New View Controller</strong></p>
<p>We want to first add a new View Controller that will hold the Web View. This can be done by dragging View Controller from object browser over to the storyboard. Once added, we want to push this new view controller when each Collection View Cell is clicked. First, drill down to the Collection View Cell, view connection inspector, and drag the selection under triggered segues over to the new view controller. Repeat this last step for the other Collection View Controller&#8217;s Collection View Cell.</p>
<p><a href="/wp-content/uploads/2013/05/storyboard14.png"><img loading="lazy" class="alignnone size-medium wp-image-304" src="/wp-content/uploads/2013/05/storyboard14-300x158.png" alt="storyboard14" width="300" height="158" /></a></p>
<p>Now, whenever a cell is clicked, it will push this new view controller to the Navigation Controller stack.</p>
<p><strong>2. Add Web View to the View Controller</strong></p>
<p>Go back to the object browser and drag it under the main view of our newly added View Controller.</p>
<p><a href="/wp-content/uploads/2013/05/storyboard15.png"><img loading="lazy" class="alignnone size-medium wp-image-305" src="/wp-content/uploads/2013/05/storyboard15-300x72.png" alt="storyboard15" width="300" height="72" /></a></p>
<p>We now need to create a custom view controller class that will enable us to control what to display in this web view. Following prior tutorial, add a new class named &#8220;JSTRBrowserViewController&#8221; that&#8217;s a subclass of &#8220;UIViewController&#8221;. Then, expose 2 properties, one for the web view component and the other to hold the target URL.</p>


<pre class="wp-block-code"><code>#import &lt;UIKit/UIKit.h>

@interface JSTRBrowserViewController : UIViewController

@property (retain, nonatomic) IBOutlet UIWebView *webView;
@property (retain, nonatomic) NSString *targetURL;

@end</code></pre>



<p>Since the target url is not a visual component, it does not need the keyword &#8220;IBOutlet&#8221;. It will be only used to set the target url from the collection view controller when user clicks on the cell. This will require us to synthesize targetURL on the implementation class. Let&#8217;s also implement the loading of our target url for the web view component</p>



<pre class="wp-block-code"><code>#import "JSTRBrowserViewController.h"

@implementation JSTRBrowserViewController

@synthesize targetURL;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
  self = &#91;super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
  if (self) {
    // Custom initialization
  }
  return self;
}

- (void)viewDidLoad
{
  &#91;super viewDidLoad];
  // Do any additional setup after loading the view.
  NSURL *url = &#91;&#91;NSURL alloc] initWithString:targetURL];
  NSURLRequest *request = &#91;&#91;NSURLRequest alloc] initWithURL:url];

  &#91;self.webView setScalesPageToFit:YES];
  &#91;self.webView loadRequest:request];
}

- (void)didReceiveMemoryWarning
{
  &#91;super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}

@end</code></pre>



<p>In our viewDidLoad method, we use the targetURL to construct an instance of NSURL.&nbsp;Then, we construct the NSURLRequest from&nbsp;and&nbsp;message webView to load this request on load.</p>



<p>Now that we have our custom class, click the recently added view controller from above, go to identity inspector, and update the class from UIViewController to JSTRBrowserViewController. Then, go to connection inspector, and drag the webView outlet over to Web View component within the latest view controller.</p>



<figure class="wp-block-image"><a href="/wp-content/uploads/2013/05/storyboard16.png"><img src="/wp-content/uploads/2013/05/storyboard16-300x130.png" alt="storyboard16" class="wp-image-308"/></a></figure>



<p><strong>3. Setting&nbsp;Target URL</strong></p>



<p>To set the target URL, we need to&nbsp;implement the prepareForSegue:sender method. This is similar to .NET winform event handler. This method will be called prior to performing the connection segue.</p>



<pre class="wp-block-code"><code>- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
  JSTRCollectionViewCell *selectedCell = (JSTRCollectionViewCell *)sender;
  JSTRBrowserViewController *targetVC = (JSTRBrowserViewController *) &#91;segue destinationViewController];
  targetVC.targetURL = selectedCell.targetURL;
}</code></pre>



<p>Since we know the destination of our segue will be JSTRBrowserViewController, we cast the destinationViewController and set the targetURL. Additionally, since we now have a new reference, import this new header: JSTRBrowserViewController.h.</p>



<p>But wait, I don&#8217;t have a property called targetURL on my JSTRCollectionViewCell! We need to add this property to the bottom of our JSTRCollectionViewCell header file and synthesize it on the implementation class.</p>



<pre class="wp-block-code"><code>#import &lt;UIKit/UIKit.h >

@interface JSTRCollectionViewCell : UICollectionViewCell

@property (retain, nonatomic) IBOutlet UILabel *title;
@property (retain, nonatomic) IBOutlet UILabel *category;
@property (retain, nonatomic) IBOutlet UILabel *summary;
@property (retain, nonatomic) IBOutlet UIImageView *avatar;
@property (retain, nonatomic) IBOutlet UIImageView *thumbnail;
@property (retain, nonatomic) NSString *targetURL;

@end</code></pre>



<p>Then, we need to set this for each and every cell that we display in our app by updating collectionView:cellForItemAtIndexPath method.</p>



<pre class="wp-block-code"><code>- (UICollectionViewCell *) collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
  JSTRCollectionViewCell *cell = &#91;collectionView dequeueReusableCellWithReuseIdentifier:@"articleCell"
forIndexPath:indexPath];
  NSDictionary *item = &#91;_articleList objectAtIndex:indexPath.item];

  NSURL *userImgURL = &#91;NSURL URLWithString:&#91;item objectForKey:@"userimage"]];
  NSData *userImgData = &#91;NSData dataWithContentsOfURL:userImgURL];
  UIImage *userImage = &#91;UIImage imageWithData:userImgData];
  &#91;cell.avatar setImage:userImage];

  cell.title.text = &#91;NSString stringWithFormat:@"%@\n\n\n\n", &#91;item objectForKey:@"title"]];

  NSArray *catList = &#91;item objectForKey:@"category"];
  NSString *catString = &#91;catList componentsJoinedByString:@", "];
  cell.category.text = &#91;NSString stringWithFormat:@"%@", catString];
  cell.summary.text = &#91;NSString stringWithFormat:@"%@\n\n\n\n\n\n\n\n\n", &#91;item objectForKey:@"description"]];

  NSURL *thumbImgURL = &#91;NSURL URLWithString:&#91;item objectForKey:@"thumbnail"]];
  NSData *thumbImgData = &#91;NSData dataWithContentsOfURL:thumbImgURL];
  UIImage *thumbImage = &#91;UIImage imageWithData:thumbImgData];
  &#91;cell.thumbnail setImage:thumbImage];

  cell.targetURL = &#91;item objectForKey:@"link"];

 return cell;
}</code></pre>



<p>As you can see, prior to our return call in this method, we retrieve the link from our dictionary representing the article from the RSS. Now that the cell has been set, our segue can extract it from the source cell that&#8217;s been click and pass it to the target view controller that holds the web view.</p>



<p><strong>4. Run it</strong></p>



<div class="wp-block-image"><figure class="alignright"><a href="/wp-content/uploads/2013/05/simulator4.png"><img src="/wp-content/uploads/2013/05/simulator4.png" alt="simulator4" class="wp-image-310"/></a></figure></div>



<p>Now, when you run your app, clicking on the cell on the simulator will push a new view controller. Since we&#8217;re using navigation controller, adding a new view controller will automatically add the back button for us on the navigation bar.</p>



<p>By default, if the prior navigation bar has no title, then the button will be rendered with &#8220;Back&#8221;. However, had we named the title bar of our prior navigation bar as &#8220;Featured Links&#8221;, then our back button would have had the label of &#8220;Featured Links&#8221;.</p>



<p>This concludes this tutorial series. I have intentionally did not implement Recent Link Collection View. Using the Featured Link Collection View, this should be fairly easy to figure out. You will need to refactor JSTRRSSReader class to handle both Featured and Recent Links. Currently, it&#8217;s hard coded to only retrieve Featured. The app that&#8217;s actually published has it fully implemented with ability for users to vote. As of May 25, it is currently under review by Apple. I&#8217;ll update this post when it does go live. Xcode project with source code for these tutorial can be downloaded from <a href="http://demo.jstrgames.com/DZoneRSS.zip">here</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
